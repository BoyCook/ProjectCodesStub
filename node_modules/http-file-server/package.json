{
  "name": "http-file-server",
  "version": "0.0.1-RC01",
  "author": {
    "name": "BoyCook"
  },
  "description": "Simple file based HTTP server in JavaScript for node.js",
  "contributors": [
    {
      "name": "Craig Cook"
    }
  ],
  "scripts": {
    "start": "node serve.js",
    "test": "make test",
    "predeploy": "echo This will be run before deploying the app",
    "postdeploy": "echo This will be run after deploying the app"
  },
  "main": "./lib/server",
  "repository": {
    "type": "git",
    "url": "https://github.com/BoyCook/HttpFileServerJS.git"
  },
  "keywords": [
    "HTTP",
    "File",
    "Server"
  ],
  "dependencies": {
    "object-utils": "https://github.com/BoyCook/ObjectUtilsJS/tarball/master",
    "string-builder": "https://github.com/BoyCook/StringBuilderJS/tarball/master"
  },
  "devDependencies": {
    "zombie": "*",
    "request": "*",
    "should": "latest"
  },
  "engines": {
    "node": ">=0.6"
  },
  "readme": "[![Build Status](http://craigcook.co.uk/build/job/HTTP%20File%20Server/badge/icon)](http://craigcook.co.uk/build/job/HTTP%20File%20Server/)\n\n## Description\nA simple file based HTTP server in node.js. It will serve up content from the filesystem based upon the URL path provided\nand the content type in 'Accept' header. This is quite useful when creating stubs for testing, or just plain HTTP file serving.\n\n## How it works\nIt's quite simple, like you'd expect an HTTP server like [Apache](http://httpd.apache.org) or [Nginx](http://nginx.org) to work.\nThe service uses the URL path to work out what directory to look in but it also uses the `Accept` header to work what the file extension is.\nIf the path is a directory it will serve back the contents, if it's a file then it will serve the file back.\nIf nothing is found a 404 is issued. The logic the server uses is:\n\n* Check for directory `{path}`\n* Check for file `{path}.{Accept}`\n* Check for file `{path}`\n\n## Usage\n\n    var server = new HttpServer({port: 8080, baseDir: '.'});\n    server.start();\n\n## Parameters\n* `port` this is the port the service will use\n* `baseDir` this is the base directory that the service will look in for data files\n\n## Examples\n\nList contents of directory `cars`\n\n    GET /cars\n\nServe the file `./cars/bmw.html`\n\n    GET /cars/bmw\n    Accept text/html\n\nor\n\n    GET /cars/bmw.html\n\nCreate directory `./bikes`\n\n    PUT /bikes\n\nCreate file `./bikes/harley`\n\n    PUT /bikes/harley\n    Data { \"name\": \"Harley Davidson\" }\n\n## Tests\n\nDisplaying results in the terminal (common usage):\n\n    make test\n\nRunning all the tests (calls test-ci and test-cov - best used by CI server):\n\n    make test-all\n\nProduce xUnit style XML report file:\n\n    make test-ci\n\nRunning the tests with coverage and producing HTML Mocha coverage report file:\n\n    make test-cov\n\n## Prerequisites\n\nYou must first install node.js http://nodejs.org\n\n## Links\n\n* http://craigcook.co.uk/build/job/HTTP%20File%20Server\n* http://craigcook.co.uk/quality/dashboard/index/241\n",
  "readmeFilename": "README.md",
  "_id": "http-file-server@0.0.1-RC01",
  "bundleDependencies": [
    "string-builder"
  ],
  "dist": {
    "shasum": "788e5c106a4181e8ae9716694bd260882acc9836"
  },
  "_from": "https://github.com/BoyCook/HttpFileServerJS/tarball/master",
  "_resolved": "https://github.com/BoyCook/HttpFileServerJS/tarball/master"
}
